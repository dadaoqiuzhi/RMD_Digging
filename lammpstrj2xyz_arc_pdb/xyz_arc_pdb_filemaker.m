%scrit file name xyz_arc_pdb_filemaker
%purpose:
%This program is used to generate .arc file which containing a sequence of structures for bonds and *.lammpstrj file of REAXC
%include bondoutdata generated by bonds_analysis program in SIB
%mode or produced by bonds_analysis_speedup program (recommend)
%include tarBOinform and tarelenummatch file generated by bondorder_deepmining program
%inclunde trjdata file generated by lammpstrj_analysis program
%version 1;2021.10.2
disp('##################################################################################################################################')
disp('Welcome!--by Qiang Liu @Institute of Nuclear Physics and Chemistry, China Academy of Engineering Physics; Email: liubinqiang@163.com');
disp('Repository adress of the Source code on github: https://github.com/dadaoqiuzhi/RMD_Digging');
disp('References: 1.Fuel 287 (2021) 119484. 2.ACS Appl. Mat. Interfaces 13(34) (2021) 41287-41302. 3.ACS Appl. Mat. Interfaces 2022, 14.(4), 5959-5972.')
disp('4.ACS Materials Letters 2023, 2174-2188. More work is coming!')
disp('##################################################################################################################################')

fprintf('\nThis program will turn BO information in tarBOinform and trjdata into.xyz,.arc or .pdb file, which can be visualized by VMD or Materials studio.\nCaution: Write in attach mode!!!\n')

formatout=input('\nPlease select the option No. of file format: 1.xyz 2.arc 3.pdb\n');
if formatout==1
    dataname=input('\nPlease give the file name *.xyz, e.g."PCdeg.xyz"£∫\n','s');
elseif formatout==2
    dataname=input('\nPlease give the file name *.arc, e.g."PCdeg.arc"£∫\n','s');
elseif formatout==3
    dataname=input('\nPlease give the file name *.pdb, e.g."PCdeg.pdb"£∫\n','s');
else
    error('Illegal file format No., please check it!!!')
end
bonddataname=input('\nFilename of bond file: \n','s');
bondper=input('\nPlease input the output frequency of BO information (Positive integer, can be confirmed in bond file): \n');
trjdataname=input('\nFilename of *.lammpstrj file: \n','s');
trjper=input('\nPlease input the output frequency of BO information and trajectory file (Positive integer, see bonds or lammpstrj file):\n');
fprintf('Automatically read atom number from the *.lammpstrj file, please wait...')
atomnum=atom_num_autoread(trjdataname); 
check_control_origin=input('\nPlease input the number for frame No. check of bonds.* and *.lammpstrj files compared with species file£¨\navoiding mismatch induced error, >=5 is suggested: \n');%øº≤Ï÷°±‡∫≈ ˝¡ø
if check_control_origin <4
    warning('Maybe impossible to detect the dismatch problem for bonds.* and *.lammpstrj files compared with species file, >=5 is suggested!')
end
if exist('fram_num_check','var')
    rerun_ans2=input('The frame No. check file for bonds.* and lammpstrj.* files exists, if to rerun check and modify process (need extra time) y/n: \n','s');
    if strcmpi(rerun_ans2,'y')
        rerun_ans='y';
    elseif strcmpi(rerun_ans2,'n')
        fprintf('According to your choice, pleae input orrect frame No. for reactant or product later on, eliminating the possible error about frame No. record and damaged arithmetic progression problem\n')
        msgbox('According to your choice, pleae input orrect frame No.!')
    elseif ~ismember(rerun_ans2,{'y','Y','n','N'})
        error('Illegal input, please check it!')
    end
else
    rerun_ans=input('If to run check process for the consistency of frame No. in the bonds.* and lammpstrj.* (need extra time and memory)y/n: \n','s');
end
bonds_lammpstrj_framecheck

elementsequence=input('\nPlease input atom type like C,H.O,N, seperated by white space, corresponding to 1,2,3,4...n (see *.data or in.*, \nespecially for element mapping:\n','s');
element=upper(elementsequence);element=strtrim(element);element=strsplit(element);
numseq={};elemax=0;
for i=1:length(element)
    numseq{1,i}=i;
    if length(element{i})>elemax
        elemax=length(element{i});
    end
end
eleswapans=input('\nDoes there exist element mapping?y/n: \n','s');
if strcmpi(eleswapans,'y')
    fprintf('\nPlease input element mapping cell, eg.{''Si'',''C'';''S'',''O''},\nsingle quotes are used in practical,element in data file--expected mapping elements: \n');
    eleswap=input('');
    eleswap=upper(eleswap);
else
    eleswap={'Nan'};
end

if elemax==2
    if formatout==1 || formatout==2
        fprintf('\nDifferent coding system is adopted according to the atom number (ASCII)\n');
        if 262143>=atomnum && atomnum>32767
            fprintf('64 base coding system is recommended for atom id');base=64;%
        elseif 32767>=atomnum && atomnum>4095
            fprintf('32 base coding system is recommended for atom id');base=32;%
        elseif 4095>=atomnum && atomnum>999
            fprintf('16 base coding system is recommended for atom id');base=16;%
        elseif 999>=atomnum
            fprintf('10 base coding system is recommended for atom id');
        elseif atomnum<0 || atomnum>32767
            error('Atom number is less than 0 or larger than  262143. If larger, please check it and modify code accordingly!')
        end
    elseif formatout==3
        fprintf('\nDifferent coding system is adopted according to the atom number (ASCII)\n');
        if 65535>=atomnum && atomnum>16383
            fprintf('256 base coding system is recommended for atom id');base=256;
        elseif 16383>=atomnum && atomnum>4095
            fprintf('128 base coding system is recommended for atom id');base=128;
        elseif 4095>=atomnum && atomnum>1023
            fprintf('64 base coding system is recommended for atom id');base=64;
        elseif 1023>=atomnum && atomnum>255
            fprintf('32 base coding system is recommended for atom id');base=32;
        elseif 255>=atomnum && atomnum>99
            fprintf('16 base coding system is recommended for atom id');base=16;
        elseif 99>=atomnum
            fprintf('10 base coding system is recommended for atom id');
        elseif atomnum<0 || atomnum>65535
            error('Atom number is less than 0 or larger than 65535. If larger, please check it and modify code accordingly!')
        end
    end
elseif elemax==1
    if formatout==1 || formatout==2
        fprintf('\nDifferent coding system is adopted according to the atom number (ASCII)\n');
        if 16777215>=atomnum && atomnum>1048575
            fprintf('64 base coding system is recommended for atom id');base=64;
        elseif 1048575>=atomnum && atomnum>65535
            fprintf('32 base coding system is recommended for atom id');base=32;
        elseif 65535>=atomnum && atomnum>9999
            fprintf('16 base coding system is recommended for atom id');base=16;
        elseif 9999>=atomnum
            fprintf('10 base coding system is recommended for atom id');
        elseif atomnum<0 || atomnum>16777215
            error('Atom number is less than 0 or larger than 16777215. If larger, please check it and modify code accordingly!')
        end
    elseif formatout==3
        fprintf('\nDifferent coding system is adopted according to the atom number (ASCII)\n');
        if 262143>=atomnum && atomnum>32767
            fprintf('64 base coding system is recommended for atom id');base=64;
        elseif 32767>=atomnum && atomnum>4095
            fprintf('32 base coding system is recommended for atom id');base=32;
        elseif 4095>=atomnum && atomnum>999
            fprintf('16 base coding system is recommended for atom id');base=16;
        elseif 999>=atomnum
            fprintf('10 base coding system is recommended for atom id');
        elseif atomnum<0 || atomnum>262143
            error('Atom number is less than 0 or larger than 262143. If larger, please check it and modify code accordingly!')
        end
    end
else
    error('Length of atom type is NOT 1 or 2, please check it!');
end
base=input('\nPlease select coding system for atom id, positive integer and not less than the recommended value: \n');
trjatomnum=atomnum;
trjcollection=input('\nPlease select the export method No.: \n1.Manually specify multi-trajectories   \n2.Monotonically increasing frame(s) in arithmetic sequence(closed interval)   \n3.Both method 1 and 2 (1 first, 2 last)\n');
if trjcollection==1
    trjcollection=input('\nTrajectories in ascending order, seperated by white space£∫\n','s');
    trjcollection=strtrim(trjcollection);trjcollection=strsplit(trjcollection);
    for i=1:length(trjcollection)
        trjcollection{1,i}=str2num(trjcollection{1,i});
    end
    
elseif trjcollection==2
    trjcollection=input('\nMinimum and maximum trajectories, and equal difference: \n','s');
    trjcollection=strtrim(trjcollection);trjcollection=strsplit(trjcollection);
    for i=1:length(trjcollection)
        trjcollection{1,i}=str2num(trjcollection{1,i});
    end
    trjmin=trjcollection{1,1};trjmax=trjcollection{1,2};trjstep=trjcollection{1,3};
    if trjmax>trjmin
        trjmod=mod(trjmax-trjmin,trjstep);trjnnum=(trjmax-trjmin-trjmod)/trjstep;
    else
        error('Illegal trajectory, please check it!!!');
    end
    for i=1:trjnnum
        trjcollection{1,1+i}=trjmin+trjstep*i;
    end
    if trjmod~=0
        trjcollection{1,2+trjnnum}=trjmax;
    end
        
elseif trjcollection==3
    trjcollection=input('\nManually specification first and then Minimum and maximum trajectories, and equal difference, seperated by white space: \n','s');
    trjcollection=strtrim(trjcollection);trjcollection=strsplit(trjcollection);
    lengthtrj=length(trjcollection);trjcollect={};
    for i=1:lengthtrj-3
        trjcollect{1,i}=str2num(trjcollection{1,i});
    end
    trjmin=str2num(trjcollection{1,lengthtrj-2});
    trjmax=str2num(trjcollection{1,lengthtrj-1});
    trjstep=str2num(trjcollection{1,lengthtrj});
    trjcollect{1,lengthtrj-2}=str2num(trjcollection{1,lengthtrj-2});
    if trjmax>trjmin
        trjmod=mod(trjmax-trjmin,trjstep);trjnnum=(trjmax-trjmin-trjmod)/trjstep;
    else
        error('Illegal trajectory, please check it!!!');
    end
    for k=1:trjnnum
        trjcollect{1,lengthtrj-2+k}=trjmin+trjstep*k;
    end
    if trjmod~=0
        trjcollect{1,lengthtrj-1+trjnnum}=trjmax;
    end
    trjcollection=trjcollect; 
else
    error('Illegal method No., please check it!!!');
end

trjcollection=cell2mat(trjcollection);trjcollection=sort(trjcollection,2);trjlength=length(trjcollection);
trjones=ones(1,trjlength);trjcollection=mat2cell(trjcollection,1,trjones);

for i=1:length(trjcollection)
    if mod(trjcollection{1,i},bondper)~=0
        error('Nonexistent trajectory in bond file, please check it!!!')
    end
    if mod(trjcollection{1,i},trjper)~=0%
        error('Nonexistent trajectory in *.lammpstrj, please check it!!!')
    end
end

if formatout==2
    fileheader='!BIOSYM archive 3';
    PBCchoi=input('\nPlease input periodic boundary condition, ON/OFF: \n','s');PBCchoi=upper(PBCchoi);
end
if formatout==3
    PBCchoi=input('\nPlease input periodic boundary condition, ON/OFF: \n','s');PBCchoi=upper(PBCchoi);
    if strcmpi(PBCchoi,'OFF')
        warndlg('Nonperiodic constraint: PBC condition is not used and coordinate is directly abstracted!')
    end
end
BOXsize=input('\nDoes the coordinate is scaled in the *.lammpstrj file, y/n: \n\n','s');BOXsize=lower(BOXsize);
if ~ismember(BOXsize,{'y','n'})
    error('Illegal BOXsize parameters, please check it!!!');
end
unwrapans=input('If to perform unwrap for atoms with coordinate affected by ghost position, causing discontinuity of structure,y/n? (Unusable Now!): \n','s');

if formatout==1
    title='!xyz_arc_pdb_filemaker Program Generated XYZ File';
elseif formatout==2
    title='!xyz_arc_pdb_filemaker Program Generated ARC File';
elseif formatout==3
    title='!xyz_arc_pdb_filemaker Program Generated PDB File';
end
date=datestr(now,31);date=strcat('!DATE',date);

fid=fopen(dataname,'at');

if formatout==2 || formatout==3
    if strcmp(PBCchoi,'ON')%
        PBC='PBC=ON';
        PBCalpha=input('Periodic boundary condition, alpha, four decimal digits: \n');
        PBCbeta=input('Periodic boundary condition, beta, four decimal digits:\n');
        PBCgamma=input('Periodic boundary condition, gamma, four decimal digits:\n');
        spacegroupname=input('\nPoint group name, eg."(P1)" for *.arc and "P 1" for *.pdb: \n','s');spacegroupname=upper(spacegroupname);
        if formatout==2
            fprintf(fid,'%s\n%s',fileheader,PBC);
        end
    elseif strcmp(PBCchoi,'OFF')
        PBC='PBC=OFF';
        if formatout==2
            fprintf(fid,'%s\n%s',fileheader,PBC);
        end
    else
        disp('Illegal periodic boundary condition in PBCchoi, please check it!!!');
        return;
    end
end

fprintf('\nxyz_arc_pdb_filemaker is running, p;ease wait...\n')

tic;

ii=1;
rawdata=fopen(bonddataname,'r');
dataline=fgetl(rawdata);datacell=textscan(dataline,'%s','delimiter','\n');
datacellchar=char(datacell{1});datadel=strrep(datacellchar,'#','');
datarep=strtrim(datadel);

while ii<=length(trjcollection)
    fprintf('\nxyz_arc_pdb_filemaker is searching for Group %d trajectory: %d,%d trajectories in total\n',ii,trjcollection{1,ii},trjlength);
    control=1;atomnum=trjatomnum;
    gap=8+atomnum;
    readline=1;
    if ii>=2
        dataline=fgetl(rawdata);
        dataline=fgetl(rawdata);
        datacell=textscan(dataline,'%s','delimiter','\n');
        datacellchar=char(datacell{1});datadel=strrep(datacellchar,'#','');
        datarep=strtrim(datadel);
    end
    datasplit=strsplit(datarep);
    if str2num(datasplit{1,2})==trjcollection{1,ii}
        control=0;
    else
        while control
            dataline=textscan(rawdata,'%q',1,'headerlines',gap-1,'delimiter','\n');
            readline=readline+gap;
            if mod(readline-1,gap)==0
                datacell=dataline;
                datacellchar=char(datacell{1});
                datadel=strrep(datacellchar,'#','');
                datarep=strtrim(datadel);
                datasplit=strsplit(datarep);
                if str2num(datasplit{1,2})==trjcollection{1,ii}
                    control=0;
                end
            else
                error('bonds_analysis_speedup found a line does not belong to a timestep line, please check it!!!')
            end
        end
    end
    dataline=textscan(rawdata,'%q',1,'headerlines',5,'delimiter','\n');
    bondoutdata={};
    bondoutdata{1,1}='Timestep';
    bondoutdata{1,2}=trjcollection{1,ii};
    for i=3:15
        bondoutdata{1,i}=[];
    end
    line=2;
    while atomnum
        dataline=fgetl(rawdata);
        readline=readline+1;
        atomnum=atomnum-1;
        datacell=textscan(dataline,'%s','delimiter','\n');
        datacellchar=char(datacell{1});
        datarep=strtrim(datacellchar);
        datasplit=strsplit(datarep);
        bondnumdata={};
        bondnumdata(1,1:3)=datasplit(1,1:3);
        if str2num(datasplit{1,3})~=0
            for i=1:str2num(datasplit{1,3})
                bondnumdata(1,i+3)=datasplit(1,i+3);
            end
        else
            i=0;
        end
        bondnumdata(1,8)=datasplit(1,i+4);
        k=i+5;
        for j=1:str2num(datasplit{1,3})
            bondnumdata(1,j+8)=datasplit(1,k);
            k=k+1;
        end
        bondnumdata(1,13:15)=datasplit(1,k:k+2);
        for kk=1:length(bondnumdata)
            if isempty(bondnumdata{kk})
                bondnumdata{kk}='NaN';
            else
                bondnumdata{kk}=str2num(bondnumdata{kk});
            end
        end
        for kk=1:length(bondnumdata)
            bondoutdata{line,kk}=bondnumdata{kk};
        end
        line=line+1;
    end
    fprintf('\nStep1:Group %d trajectory %d is successfully processed by bonds_analysis_speedup and bondnumdata is generated,\n continue running bondorder_deepmining program, please wait...\n',ii,trjcollection{1,ii});%bonds_analysis_speedupÕÍ≥…
   
    
    separator={'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'};
    [row,~]=size(bondoutdata);bondoutdata(row+1,:)=separator(1,:);tarbondnum=row-1;
    tarelenummatch={};tarBOinform={};lineofelenum=1;tartrjnum=1;
    while ~ischar(bondoutdata{tartrjnum+1,1})
        datapython={};datapython{1,1}=bondoutdata{tartrjnum+1,1};
        for i=1:bondoutdata{tartrjnum+1,3}
            datapython{1,i+1}=bondoutdata{tartrjnum+1,3+i};
        end
        elenummatch={};elenummatch(:,1)=element';
        for i=1:length(element)
            elenummatch{i,2}=0;
        end
        [elenumrow,~]=size(elenummatch);
        elementname=charnum_match(element,numseq,bondoutdata{tartrjnum+1,2});
        if ismember(elementname,eleswap(:,1)) 
            [~,lib]=ismember(elementname,eleswap(:,1));
            elementname=eleswap{lib,2};
        end
        elenummatch=eleme_molecule(elenummatch,elementname);
        BOinform={};BOinform(1,:)=bondoutdata(tartrjnum+1,:);
        lineofbo=2;
        bondoutdata{tartrjnum+1,1}='NaN';
        datapython{1,1}='NaN';
        bondoutdata=cellrowcol_del(bondoutdata,'delrow','NaN');
        tarbondnum=tarbondnum-1;
        datapython=cellrowcol_del(datapython,'delcol','NaN');
        while ~isempty(datapython) && ~ischar(bondoutdata{tartrjnum+1,1})
            alter=datapython{1,1};kk=0;
            for i=tartrjnum+1:tartrjnum+tarbondnum
                if alter==datapython{1,1}
                    kk=kk+1;
                    if datapython{1,1}==bondoutdata{i,1}
                        j=length(datapython)+1;
                        for k=1:bondoutdata{i,3}
                            datapython{1,j}=bondoutdata{i,3+k};
                            j=j+1;
                        end
                        datapython{1,1}='NaN';
                        datapython=cellrowcol_del(datapython,'delcol','NaN');
                        elementname=charnum_match(element,numseq,bondoutdata{i,2});
                        if ismember(elementname,eleswap(:,1)) 
                            [~,lib]=ismember(elementname,eleswap(:,1));
                            elementname=eleswap{lib,2};
                        end
                        elenummatch=eleme_molecule(elenummatch,elementname);
                        BOinform(lineofbo,:)=bondoutdata(i,:);
                        lineofbo=lineofbo+1;
                        bondoutdata{i,1}='NaN';
                        bondoutdata=cellrowcol_del(bondoutdata,'delrow','NaN');
                        tarbondnum=tarbondnum-1;
                        break
                    end
                    if alter==datapython{1,1} && kk==tarbondnum 
                        datapython{1,1}='NaN';
                        datapython=cellrowcol_del(datapython,'delcol','NaN');
                        break
                    end
                end
            end
        end
        tarelenummatch(1:elenumrow,2*lineofelenum-1:2*lineofelenum)=elenummatch(1:elenumrow,1:2);
        lineofelenum=lineofelenum+1;[BOrow,~]=size(BOinform);
        BOinform(BOrow+1,:)=separator(1,:);
        [rowtarBO,~]=size(tarBOinform);
        tarBOinform(rowtarBO+1:rowtarBO+BOrow+1,:)=BOinform(1:BOrow+1,:);
        continue
    end
    fprintf('\nStep2:Group %d trajectory %d is successfully processed by bondorder_deepmining, and tarBOinform is generated,\ncontinue running lammpstrj_analysis, please wait...\n',ii,trjcollection{1,ii});%bonds_analysis_speedupÕÍ≥…

    
    trjrawdata=fopen(trjdataname,'r');
    while ~feof(trjrawdata)
        dataline=fgetl(trjrawdata);
        datacell=textscan(dataline,'%s','delimiter','\n');
        datacellchar=char(datacell{1});
        datarep=strtrim(datacellchar);
        datasplit=strsplit(datarep);
        if sum(ismember({'ATOMS', 'id','type'},datasplit))==3 
            coord_position=[];
            if strcmpi('y',BOXsize)
                if sum(ismember({'ATOMS', 'id','type','xs','ys','zs'},datasplit))==6
                    coord_tag={'ATOMS','type','xs','ys','zs'};
                    for i=1:5
                        if sum(ismember(datasplit,coord_tag(i)))==1
                            coord_position(length(coord_position)+1)=find(strcmp(datasplit,coord_tag(i)));
                        end
                    end
                end
            elseif sum(ismember({'ATOMS', 'id','type','x','y','z'},datasplit))==6
                coord_tag={'ATOMS','type','x','y','z'};
                for i=1:5
                    if sum(ismember(datasplit,coord_tag(i)))==1
                        coord_position(length(coord_position)+1)=find(strcmp(datasplit,coord_tag(i)));
                    end
                end
            else
                error('Something about atom id°¢type and atom coordinate are lost')
            end
        end
    end
    fclose(trjrawdata);
    if min(coord_position)==coord_position(1)
        coord_position(1)=coord_position(1)-1;
        for j=2:5
            coord_position(j)=coord_position(j)-2;
        end
    elseif coord_position(1)>coord_position(2) && coord_position(1)<coord_position(3)
        for j=1:2
            coord_position(j)=coord_position(j)-1;
        end
        for j=3:5
            coord_position(j)=coord_position(j)-2;
        end
    elseif max(coord_position)==coord_position(1)
        for j=1:5
            coord_position(j)=coord_position(j)-1;
        end
    end
	
    trjreadline=0;control=1;atomnum=trjatomnum;
    gap=9+atomnum;
    trjrawdata=fopen(trjdataname,'r');
    dataline=fgetl(trjrawdata);
    readline=readline+1;
    trjreadline=trjreadline+1;
    dataline=fgetl(trjrawdata);
    readline=readline+1;
    trjreadline=trjreadline+1;
    datacell=textscan(dataline,'%s','delimiter','\n');
    datacellchar=char(datacell{1});
    datarep=strtrim(datacellchar);
    if str2num(datarep)==trjcollection{1,ii}+num_modify
        control=0;
    else
        while control
            dataline=textscan(trjrawdata,'%q',1,'headerlines',gap-1,'delimiter','\n');
            trjreadline=trjreadline+gap;
            if mod(trjreadline-2,gap)==0
                datacell=dataline;
                datacellchar=char(datacell{1});
                datarep=strtrim(datacellchar);
                if str2num(datarep)==trjcollection{1,ii}+num_modify
                    control=0;
                end
            else
                error('lammpstrj_analysis found a line does not belong to a timestep line, please check it!!!£°');
            end
        end
    end
    %
    dataline=textscan(trjrawdata,'%q',1,'headerlines',2,'delimiter','\n');
    boxsize=[];
    dataline=fgetl(trjrawdata);
    datacell=textscan(dataline,'%s','delimiter','\n');
    datacellchar=char(datacell{1});
    datarep=strtrim(datacellchar);
    datasplit=strsplit(datarep);
    for i=1:length(datasplit)
        boxsize(1,i)=str2num(datasplit{1,i});
    end
    dataline=fgetl(trjrawdata);
    datacell=textscan(dataline,'%s','delimiter','\n');
    datacellchar=char(datacell{1});
    datarep=strtrim(datacellchar);
    datasplit=strsplit(datarep);
    for i=1:length(datasplit)
        boxsize(2,i)=str2num(datasplit{1,i});
    end
    dataline=fgetl(trjrawdata);
    datacell=textscan(dataline,'%s','delimiter','\n');
    datacellchar=char(datacell{1});
    datarep=strtrim(datacellchar);
    datasplit=strsplit(datarep);
    for i=1:length(datasplit)
        boxsize(3,i)=str2num(datasplit{1,i});
    end
    if formatout==1
        if ii==1
        fprintf(fid,'%d\n%s %s',atomnum,title,date);
        elseif ii>1
            fprintf(fid,'\n%d\n%s %s',atomnum,title,date);
        end
        if strcmpi(BOXsize,'y')
            PBCa=boxsize(1,2)-boxsize(1,1);
            PBCb=boxsize(2,2)-boxsize(2,1);
            PBCc=boxsize(3,2)-boxsize(3,1);
        end
    elseif formatout==2
        %
        if strcmp(PBCchoi,'ON')
            PBC='PBC=ON';
            PBCa=boxsize(1,2)-boxsize(1,1);
            PBCb=boxsize(2,2)-boxsize(2,1);
            PBCc=boxsize(3,2)-boxsize(3,1);
            fprintf(fid,'\n%-64s\n%s\n%3s%10.4f%10.4f%10.4f%10.4f%10.4f%10.4f %-16s',title,date,'PBC',PBCa,PBCb,PBCc,PBCalpha,PBCbeta,PBCgamma,spacegroupname);
        elseif strcmp(PBCchoi,'OFF')
            PBC='PBC=OFF';
            fprintf(fid,'\n%-64s\n%s\',title,date);
        else
            disp('Illegal periodic boundary condition in PBCchoi, please check it!!!');
            return;
        end
    elseif formatout==3
        if strcmp(PBCchoi,'ON')
            PBCa=boxsize(1,2)-boxsize(1,1);
            PBCb=boxsize(2,2)-boxsize(2,1);
            PBCc=boxsize(3,2)-boxsize(3,1);
            [~,tarmatchcol]=size(tarelenummatch);numofmolecule=tarmatchcol/2;
            if ii==1
                fprintf(fid,'%-64s\n%s\n%-9s%-9.3f%-9.3f%-8.3f%-7.2f%-7.2f%-6.2f%-14s%d',title,date,'CRYST1',PBCa,PBCb,PBCc,PBCalpha,PBCbeta,PBCgamma,spacegroupname,numofmolecule);
            else
                fprintf(fid,'\n%-64s\n%s\n%-9s%-9.3f%-9.3f%-8.3f%-7.2f%-7.2f%-6.2f%-14s%d',title,date,'CRYST1',PBCa,PBCb,PBCc,PBCalpha,PBCbeta,PBCgamma,spacegroupname,numofmolecule);
            end
        elseif strcmp(PBCchoi,'OFF')
            PBCa=0.00;PBCb=PBCa;PBCc=PBCa;
            PBCalpha=0.00;PBCbeta=PBCalpha;PBCgamma=PBCalpha;
            [~,tarmatchcol]=size(tarelenummatch);numofmolecule=tarmatchcol/2;
            if ii==1
                fprintf(fid,'%-64s\n%s\n%-9s%-9.3f%-9.3f%-8.3f%-7.2f%-7.2f%-6.2f%-14s%d',title,date,'CRYST1',PBCa,PBCb,PBCc,PBCalpha,PBCbeta,PBCgamma,'None',numofmolecule);
            else
                fprintf(fid,'\n%-64s\n%s\n%-9s%-9.3f%-9.3f%-8.3f%-7.2f%-7.2f%-6.2f%-14s%d',title,date,'CRYST1',PBCa,PBCb,PBCc,PBCalpha,PBCbeta,PBCgamma,'None',numofmolecule);
            end
        end
    end
    
    dataline=textscan(trjrawdata,'%q',1,'headerlines',0,'delimiter','\n');
    trjdata=[];line=1;
    while atomnum
        dataline=fgetl(trjrawdata);
        readline=readline+1;
        trjreadline=trjreadline+1;
        atomnum=atomnum-1;
        datacell=textscan(dataline,'%s','delimiter','\n');
        datacellchar=char(datacell{1});
        datarep=strtrim(datacellchar);
        datasplit=strsplit(datarep);
		trjdata(line,:)=coord_position_get(coord_position,datasplit);
        line=line+1;
    end
    if formatout==1
        fprintf('\nStep3:Group %d trajectory %d is successfully processed b lammpstrj_analysis and trjdata is generated, \ncontinue running xyz_arc_pdb_filemaker to generate *.xyz file£¨please waits...\n',ii,trjcollection{1,ii})
    elseif formatout==2
        fprintf('\nStep3:Group %d trajectory %d is successfully processed b lammpstrj_analysis and trjdata is generated, \ncontinue running xyz_arc_pdb_filemaker to generate *.arc file£¨please waits...\n',ii,trjcollection{1,ii})
     elseif formatout==3
        fprintf('\nStep3:Group %d trajectory %d is successfully processed b lammpstrj_analysis and trjdata is generated, \ncontinue running xyz_arc_pdb_filemaker to generate *.pdb file£¨please waits...\n',ii,trjcollection{1,ii})
    end
    
    %unwrap
    if strcmpi(unwrapans,'y')
        trjdata=PBC_Unwrap(unwrapans,tarBOinform,trjdata,BOXsize,boxsize,element);
    end
    
    [~,tarmatchcol]=size(tarelenummatch);numofmolecule=tarmatchcol/2;
    [tarBOrow,~]=size(tarBOinform);line=1;trjreadline=1;
    MOLE=1;%
    while trjreadline<=tarBOrow
        if strcmp(tarBOinform{trjreadline,1},'#')
            if formatout==2
                fprintf(fid,'\n%s','end');
            end
            if formatout==3%
                fprintf(fid,'\n%3s   %5d      %3s %s%4d%s','TER',MOLE,'MOL','A',MOLE,'A');
            end
            trjreadline=trjreadline+1;
            readline=readline+1;
            MOLE=MOLE+1;
        else
          elementname=charnum_match(element,numseq,tarBOinform{trjreadline,2});%
          if ismember(elementname,eleswap(:,1)) 
              [~,lib]=ismember(elementname,eleswap(:,1));
              elementname=eleswap{lib,2};
          end
          atomid_conv=SysConvert(tarBOinform{trjreadline,1},base);
          atomname=strcat(elementname,atomid_conv);%
          
          [trjrow,~]=size(trjdata);tartrjdata=[];
          for i=1:trjrow
              if trjdata(i,1)==tarBOinform{trjreadline,1}
                  tartrjdata(1,:)=trjdata(i,:);
              end
          end
          
          if strcmpi(BOXsize,'n')
              xcoord=tartrjdata(3);ycoord=tartrjdata(4);zcoord=tartrjdata(5);
          elseif strcmpi(BOXsize,'y')
              xcoord=boxsize(1,1)+tartrjdata(3)*PBCa;
              ycoord=boxsize(2,1)+tartrjdata(4)*PBCb;
              zcoord=boxsize(3,1)+tartrjdata(5)*PBCc;
          else
              error('Illegal BOXsize parameters, please check it!!!');
          end
          
          if formatout==1
              fprintf(fid,'\n%-5s %14.09f %14.09f %14.09f',atomname,xcoord,ycoord,zcoord);
          elseif formatout==2
              residueseqname= strcat('MOLE',' #',num2str(MOLE));
              residueseqname=strrep(residueseqname,'#','');
              ff=forcefield(element,numseq,tarBOinform{trjreadline,2});
              if ismember(upper(ff),eleswap(:,1)) 
                  [~,lib]=ismember(upper(ff),eleswap(:,1));
                  ff=lower(eleswap{lib,2});
              end
              charge=tarBOinform{trjreadline,15};
              
              fprintf(fid,'\n%-5s %14.09f %14.09f %14.09f %-12s%-7s %-2s %6.3f',atomname,xcoord,ycoord,zcoord,residueseqname,ff,elementname,charge);%%-(+)5d,5◊÷Ω⁄øÌ◊Û(”“)∂‘∆Î’˚ ˝£¨≤ª◊„‘⁄«∞∑Ω≤πø’∏Ò£¨%12.09f=%12.9f:12◊÷Ω⁄øÌ£¨9Œª–° ˝æ´∂»£¨≤ª◊„”√0≤π◊„–° ˝Œª°£%07d,7◊÷Ω⁄øÌ’˚ ˝£¨≤ª◊„≤π0
          elseif formatout==3
              atomNO=tartrjdata(1);
              charge=tarBOinform{trjreadline,15};
              fprintf(fid,'\n%4s  %5d %4s %3s  %4d    %8.03f%8.03f%8.03f%6.02f%6.02f          %2s%2.01f','ATOM',atomNO,atomname,'MOL',MOLE,xcoord,ycoord,zcoord,1.00,0.00,elementname,charge);
          end
          trjreadline=trjreadline+1;
          readline=readline+1;
        end
    end
    
    if formatout==2
        fprintf(fid,'\n%s','end');
    end
    
    if formatout==3
        
        trjreadline=1;
        while trjreadline<=tarBOrow
            if tarBOinform{trjreadline,3}==0
                fprintf(fid,'\n%6s%5d','CONECT',tarBOinform{trjreadline,1});
            elseif tarBOinform{trjreadline,3}==1
                fprintf(fid,'\n%6s%5d%5d','CONECT',tarBOinform{trjreadline,1},tarBOinform{trjreadline,4});
            elseif tarBOinform{trjreadline,3}==2
                fprintf(fid,'\n%6s%5d%5d%5d','CONECT',tarBOinform{trjreadline,1},tarBOinform{trjreadline,4},tarBOinform{trjreadline,5});
            elseif tarBOinform{trjreadline,3}==3
                fprintf(fid,'\n%6s%5d%5d%5d%5d','CONECT',tarBOinform{trjreadline,1},tarBOinform{trjreadline,4},tarBOinform{trjreadline,5},tarBOinform{trjreadline,6});
            elseif tarBOinform{trjreadline,3}==4
                fprintf(fid,'\n%6s%5d%5d%5d%5d%5d','CONECT',tarBOinform{trjreadline,1},tarBOinform{trjreadline,4},tarBOinform{trjreadline,5},tarBOinform{trjreadline,6},tarBOinform{trjreadline,7});
            elseif ~isnumeric(tarBOinform{trjreadline,3}) && ~strcmpi(tarBOinform{trjreadline,3},'#')
                error('Bond order is not between 0-4, please check it!!!');
            end
            trjreadline=trjreadline+1;
        end
        fprintf(fid,'\n%s','END');
    end

    if ii==length(trjcollection)
        break;
    end
    ii=ii+1; 
end
fclose(rawdata);
fclose(trjrawdata);
fclose(fid);
fprintf('\nxyz_arc_pdb_filemaker is successfully finished\n')
if formatout==1
    fprintf('\n*.xyz file is generated: %s\n',dataname)
elseif formatout==2
    fprintf('\n*.arc file is generated: %s\n',dataname)
elseif formatout==3
    fprintf('\n*.pdb file is generated: %s\n',dataname)
end
msgbox('Done£°xyz_arc_pdb_filemaker is successfully finished');

toc 
fprintf('\nTotal task time: %.2f s\n',toc)

clear ans atomnum bondnumdata control datacell datacellchar datadel dataline dataname datarep datasplit found gap i j k kk line 
clear outputans rawdata tartrajectory trajper unfound dataoutrow dataoutcol dataoutputrow dataoutcolchar dataoutputcol filename
clear alter bondrownum BOrow col datapython element elementname elementsequence elementsequence readline atomNO elemax
clear elenummatch elenumrow i j k kk  lineofbo lineofelenum numseq row rowtarBO separator speciestrjnum spacegroupname
clear tarbondnum tartrjnum trajectorynum bonddataname bondper ii PBCa PBCalpha PBCb PBCbeta PBCc PBCgamma tarelenummatch
clear ans atomname BOXsize charge dataname date element elementname elementsequence ff fid fileheader numseq PBC PBCchoi PBCcond 
clear residuename residueseqname tarrow title xcoord xhi xlo xlength ycoord yhi ylo ylength zcoord zhi zlo zlength date topo topocol  
clear molecule comatomname mdfans symmetry groupname connect row connectivity i j k line trjatomnum trjcollection atomid_conv
clear BOinform lineofmolecule numofmolecule tarBOrow tarmatchcol tartrjdata trjrow trjdataname trjlength trjmax trjmin
clear trjmod trjnnum trjnum trjones trjper trjrawdata trjreadline trjstep MOLE lib base eleswapans eleswap boxsize formatout
clear trjdata tarBOinform unwrapans coord_tag coord_position